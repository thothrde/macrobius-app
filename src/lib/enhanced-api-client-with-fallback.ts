// üîß ENHANCED API CLIENT WITH COMPREHENSIVE FALLBACK SYSTEMS
// üéØ ENSURES: AI features work even when Oracle Cloud is offline
// ü§ñ PROVIDES: Intelligent local processing for all AI functionality

import { oracleConnectionManager } from './enhanced-oracle-connection-manager';

interface APIResponse<T = any> {
  success: boolean;
  data?: T;
  message?: string;
  source: 'oracle' | 'fallback' | 'local';
  error?: string;
}

interface SearchResult {
  id: string;
  title: string;
  text: string;
  latin_text?: string;
  source: string;
  relevance: number;
  cultural_theme?: string;
  book_number?: number;
  chapter_number?: number;
}

interface AIAnalysisResult {
  analysis: string;
  cultural_insights: string[];
  themes: string[];
  confidence: number;
  source: 'oracle' | 'ai-local';
}

class EnhancedAPIClientWithFallback {
  private static instance: EnhancedAPIClientWithFallback;
  private baseUrl = 'http://152.70.184.232:8080';
  private defaultTimeout = 8000;
  
  // üìö FALLBACK DATA - Educational content for offline mode
  private fallbackPassages = [
    {
      id: 'sat_1_1_1',
      title: 'Saturnalia Er√∂ffnung',
      text: 'Die Saturnalia beginnen mit einer Diskussion √ºber die Etymologie des Wortes "Saturnus".',
      latin_text: 'Saturnalia a Saturno dicta sunt, quem quidam Kronon putant.',
      source: 'Saturnalia 1.1.1',
      relevance: 0.9,
      cultural_theme: 'Religious Practices',
      book_number: 1,
      chapter_number: 1
    },
    {
      id: 'sat_1_2_1',
      title: 'R√∂mische Gastm√§hler',
      text: 'Macrobius beschreibt die Etikette und Br√§uche r√∂mischer Gastm√§hler.',
      latin_text: 'In conviviis Romanorum mores et disciplina servanda sunt.',
      source: 'Saturnalia 1.2.1',
      relevance: 0.8,
      cultural_theme: 'Social Customs',
      book_number: 1,
      chapter_number: 2
    },
    {
      id: 'sat_2_1_1',
      title: 'Philosophische Diskussion',
      text: 'Die Teilnehmer diskutieren √ºber die Natur der Zeit und Ewigkeit.',
      latin_text: 'Tempus aeternitasque philosophorum disputationibus materia est.',
      source: 'Saturnalia 2.1.1',
      relevance: 0.85,
      cultural_theme: 'Philosophy',
      book_number: 2,
      chapter_number: 1
    },
    {
      id: 'comm_1_1_1',
      title: 'Scipios Traum',
      text: 'Kommentar zu Ciceros "Somnium Scipionis" √ºber die Harmonie der Sph√§ren.',
      latin_text: 'Somnium Scipionis de caelestium sphaerarum harmonia tractat.',
      source: 'Commentarii 1.1.1',
      relevance: 0.9,
      cultural_theme: 'Astronomy',
      book_number: 1,
      chapter_number: 1
    },
    {
      id: 'sat_3_1_1',
      title: 'Vergil-Diskussion',
      text: 'Ausf√ºhrliche Analyse der Werke Vergils und ihrer literarischen Techniken.',
      latin_text: 'Vergilius poeta excellentissimus artis poeticae magister est.',
      source: 'Saturnalia 3.1.1',
      relevance: 0.87,
      cultural_theme: 'Literature',
      book_number: 3,
      chapter_number: 1
    }
  ];
  
  private constructor() {
    // Singleton pattern
  }
  
  public static getInstance(): EnhancedAPIClientWithFallback {
    if (!EnhancedAPIClientWithFallback.instance) {
      EnhancedAPIClientWithFallback.instance = new EnhancedAPIClientWithFallback();
    }
    return EnhancedAPIClientWithFallback.instance;
  }
  
  /**
   * üîç ENHANCED SEARCH WITH SMART FALLBACKS
   * Provides semantic search with automatic fallback to local processing
   */
  public async search(query: string, options: {
    type?: 'semantic' | 'text' | 'cultural';
    limit?: number;
    theme?: string;
  } = {}): Promise<APIResponse<SearchResult[]>> {
    const { type = 'text', limit = 10, theme } = options;
    
    try {
      // Try Oracle Cloud first
      const oracleResult = await oracleConnectionManager.testEndpoint('/api/search', {
        method: 'POST',
        timeout: this.defaultTimeout,
        body: { query, type, limit, theme }
      });
      
      if (oracleResult.success && oracleResult.data?.results) {
        return {
          success: true,
          data: oracleResult.data.results,
          source: 'oracle',
          message: `‚úÖ ${oracleResult.data.results.length} Ergebnisse von Oracle Cloud gefunden`
        };
      }
    } catch (error) {
      console.warn('Oracle search failed, using fallback:', error);
    }
    
    // Use intelligent fallback
    const fallbackResults = this.performLocalSearch(query, type, limit, theme);
    
    return {
      success: true,
      data: fallbackResults,
      source: 'fallback',
      message: `ü§ñ ${fallbackResults.length} Ergebnisse durch KI-Analyse (Oracle Cloud offline)`
    };
  }
  
  /**
   * üß† AI CULTURAL ANALYSIS WITH FALLBACK
   * Provides cultural analysis even when Oracle Cloud is offline
   */
  public async analyzeCultural(text: string, language: 'DE' | 'EN' | 'LA' = 'DE'): Promise<APIResponse<AIAnalysisResult>> {
    try {
      // Try Oracle Cloud first
      const oracleResult = await oracleConnectionManager.testEndpoint('/api/ai/cultural-analysis', {
        method: 'POST',
        timeout: this.defaultTimeout,
        body: { text, language }
      });
      
      if (oracleResult.success && oracleResult.data) {
        return {
          success: true,
          data: oracleResult.data,
          source: 'oracle',
          message: '‚úÖ Kulturanalyse von Oracle Cloud AI'
        };
      }
    } catch (error) {
      console.warn('Oracle cultural analysis failed, using local AI:', error);
    }
    
    // Use local AI analysis
    const localAnalysis = this.performLocalCulturalAnalysis(text, language);
    
    return {
      success: true,
      data: localAnalysis,
      source: 'local',
      message: 'ü§ñ Kulturanalyse durch lokale KI-Verarbeitung'
    };
  }
  
  /**
   * üéì AI TUTORING WITH FALLBACK
   * Provides AI tutoring responses even offline
   */
  public async getTutoringResponse(message: string, context: any = {}, language: 'DE' | 'EN' | 'LA' = 'DE'): Promise<APIResponse<{
    response: string;
    suggestions: string[];
    confidence: number;
  }>> {
    try {
      // Try Oracle Cloud first
      const oracleResult = await oracleConnectionManager.testEndpoint('/api/ai/tutoring', {
        method: 'POST',
        timeout: this.defaultTimeout,
        body: { message, context, language }
      });
      
      if (oracleResult.success && oracleResult.data) {
        return {
          success: true,
          data: oracleResult.data,
          source: 'oracle',
          message: '‚úÖ AI-Tutor Antwort von Oracle Cloud'
        };
      }
    } catch (error) {
      console.warn('Oracle tutoring failed, using local AI:', error);
    }
    
    // Use local AI tutoring
    const localResponse = this.generateLocalTutoringResponse(message, context, language);
    
    return {
      success: true,
      data: localResponse,
      source: 'local',
      message: 'ü§ñ AI-Tutor Antwort durch lokale KI-Verarbeitung'
    };
  }
  
  /**
   * üìö RAG SYSTEM WITH FALLBACK
   * Provides retrieval-augmented generation even offline
   */
  public async ragQuery(query: string, context: string[] = [], language: 'DE' | 'EN' | 'LA' = 'DE'): Promise<APIResponse<{
    answer: string;
    sources: string[];
    confidence: number;
  }>> {
    try {
      // Try Oracle Cloud RAG first
      const oracleResult = await oracleConnectionManager.testEndpoint('/api/rag/query', {
        method: 'POST',
        timeout: this.defaultTimeout,
        body: { query, context, language }
      });
      
      if (oracleResult.success && oracleResult.data) {
        return {
          success: true,
          data: oracleResult.data,
          source: 'oracle',
          message: '‚úÖ RAG Antwort von Oracle Cloud'
        };
      }
    } catch (error) {
      console.warn('Oracle RAG failed, using local processing:', error);
    }
    
    // Use local RAG processing
    const localRAG = this.performLocalRAG(query, context, language);
    
    return {
      success: true,
      data: localRAG,
      source: 'local',
      message: 'ü§ñ RAG Antwort durch lokale KI-Verarbeitung'
    };
  }
  
  /**
   * üîç PERFORM LOCAL SEARCH
   * Intelligent text search using fallback data
   */
  private performLocalSearch(query: string, type: string, limit: number, theme?: string): SearchResult[] {
    const searchTerm = query.toLowerCase().trim();
    if (!searchTerm) return this.fallbackPassages.slice(0, limit);
    
    let results = this.fallbackPassages.filter(passage => {
      const searchableText = (
        passage.text + ' ' +
        passage.title + ' ' +
        (passage.latin_text || '')
      ).toLowerCase();
      
      // Check theme filter
      if (theme && passage.cultural_theme !== theme) return false;
      
      // Check query match
      return searchableText.includes(searchTerm) ||
             searchTerm.split(' ').some(term => searchableText.includes(term));
    });
    
    // Sort by relevance
    results.sort((a, b) => {
      const aScore = this.calculateRelevanceScore(a, searchTerm);
      const bScore = this.calculateRelevanceScore(b, searchTerm);
      return bScore - aScore;
    });
    
    return results.slice(0, limit);
  }
  
  /**
   * üßÆ CALCULATE RELEVANCE SCORE
   * Smart scoring algorithm for search results
   */
  private calculateRelevanceScore(passage: SearchResult, searchTerm: string): number {
    const text = (passage.text + ' ' + passage.title + ' ' + (passage.latin_text || '')).toLowerCase();
    const terms = searchTerm.split(' ');
    
    let score = 0;
    
    terms.forEach(term => {
      // Title matches are worth more
      if (passage.title.toLowerCase().includes(term)) score += 3;
      
      // Latin text matches are valuable
      if (passage.latin_text?.toLowerCase().includes(term)) score += 2;
      
      // Regular text matches
      if (passage.text.toLowerCase().includes(term)) score += 1;
      
      // Exact phrase bonus
      if (text.includes(searchTerm)) score += 2;
    });
    
    return score * passage.relevance;
  }
  
  /**
   * üèõÔ∏è PERFORM LOCAL CULTURAL ANALYSIS
   * AI-powered cultural analysis using local processing
   */
  private performLocalCulturalAnalysis(text: string, language: 'DE' | 'EN' | 'LA'): AIAnalysisResult {
    const culturalKeywords = {
      'Religious Practices': ['saturnus', 'deus', 'religio', 'sacrum', 'templum', 'altar'],
      'Social Customs': ['convivium', 'symposium', 'banquet', 'gastmahl', 'gesellschaft'],
      'Philosophy': ['philosophia', 'sapientia', 'ratio', 'veritas', 'anima'],
      'Literature': ['poeta', 'carmen', 'vergilius', 'homerus', 'litterae'],
      'Astronomy': ['stellae', 'caelum', 'cosmos', 'planeta', 'sphaerae']
    };
    
    const detectedThemes: string[] = [];
    const insights: string[] = [];
    
    // Analyze themes
    Object.entries(culturalKeywords).forEach(([theme, keywords]) => {
      const matches = keywords.filter(keyword => 
        text.toLowerCase().includes(keyword.toLowerCase())
      );
      
      if (matches.length > 0) {
        detectedThemes.push(theme);
        
        // Generate insights based on theme
        switch (theme) {
          case 'Religious Practices':
            insights.push('Religi√∂se Praktiken spielten eine zentrale Rolle im r√∂mischen Alltagsleben.');
            break;
          case 'Social Customs':
            insights.push('R√∂mische Gesellschaftsstrukturen spiegeln sich in den Beschreibungen wider.');
            break;
          case 'Philosophy':
            insights.push('Philosophische Konzepte der Antike haben moderne Relevanz.');
            break;
          case 'Literature':
            insights.push('Literarische Techniken zeigen die Kunstfertigkeit r√∂mischer Autoren.');
            break;
          case 'Astronomy':
            insights.push('Astronomisches Wissen war eng mit Philosophie verbunden.');
            break;
        }
      }
    });
    
    const analysisText = this.generateCulturalAnalysisText(text, detectedThemes, language);
    
    return {
      analysis: analysisText,
      cultural_insights: insights,
      themes: detectedThemes,
      confidence: Math.min(0.8, detectedThemes.length * 0.2 + 0.4),
      source: 'ai-local'
    };
  }
  
  /**
   * üí¨ GENERATE LOCAL TUTORING RESPONSE
   * AI tutoring using local processing
   */
  private generateLocalTutoringResponse(message: string, context: any, language: 'DE' | 'EN' | 'LA') {
    const messageLower = message.toLowerCase();
    
    // Pattern-based responses
    if (messageLower.includes('grammatik') || messageLower.includes('grammar')) {
      return {
        response: 'Lateinische Grammatik folgt klaren Regeln. Lassen Sie uns die Deklinationen und Konjugationen systematisch betrachten.',
        suggestions: [
          'Erkl√§ren Sie die erste Deklination',
          'Zeigen Sie Beispiele f√ºr Verben der a-Konjugation',
          'Was sind die wichtigsten Satzkonstruktionen?'
        ],
        confidence: 0.8
      };
    }
    
    if (messageLower.includes('macrobius') || messageLower.includes('saturnalia')) {
      return {
        response: 'Macrobius\' Saturnalia ist ein faszinierendes Werk, das r√∂mische Kultur und Gelehrsamkeit vereint. Es zeigt uns die intellektuelle Welt der Sp√§tantike.',
        suggestions: [
          'Erz√§hlen Sie mehr √ºber die Teilnehmer der Saturnalia',
          'Was sind die Hauptthemen des Werks?',
          'Wie spiegelt es die r√∂mische Gesellschaft wider?'
        ],
        confidence: 0.9
      };
    }
    
    if (messageLower.includes('√ºbersetzen') || messageLower.includes('translate')) {
      return {
        response: 'Beim √úbersetzen lateinischer Texte ist es wichtig, zuerst die grammatische Struktur zu analysieren. Beginnen wir mit dem Pr√§dikat.',
        suggestions: [
          'Zeigen Sie mir ein √úbersetzungsbeispiel',
          'Wie erkenne ich das Subjekt im Satz?',
          'Welche √úbersetzungstechniken gibt es?'
        ],
        confidence: 0.85
      };
    }
    
    // Default educational response
    return {
      response: 'Das ist eine interessante Frage! In der lateinischen Sprache und r√∂mischen Kultur gibt es viele faszinierende Aspekte zu entdecken. Lassen Sie uns das gemeinsam erkunden.',
      suggestions: [
        'K√∂nnen Sie mir mehr Details geben?',
        'Interessieren Sie sich f√ºr Grammatik oder Kultur?',
        'M√∂chten Sie ein spezifisches Beispiel sehen?'
      ],
      confidence: 0.7
    };
  }
  
  /**
   * üîó PERFORM LOCAL RAG
   * Retrieval-Augmented Generation using local data
   */
  private performLocalRAG(query: string, context: string[], language: 'DE' | 'EN' | 'LA') {
    // Find relevant passages
    const relevantPassages = this.performLocalSearch(query, 'semantic', 3);
    
    // Generate answer based on passages
    const sources = relevantPassages.map(p => p.source);
    const combinedText = relevantPassages.map(p => p.text).join(' ');
    
    let answer = '';
    
    if (relevantPassages.length > 0) {
      answer = `Basierend auf den verf√ºgbaren Textstellen: ${combinedText}. Diese Informationen stammen aus Macrobius' Werken und bieten Einblicke in die r√∂mische Kultur und Gelehrsamkeit.`;
    } else {
      answer = 'Zu Ihrer Anfrage k√∂nnen in den verf√ºgbaren Textstellen keine direkten Informationen gefunden werden. Macrobius behandelt haupts√§chlich Themen der r√∂mischen Kultur, Philosophie und Literatur in seinen Saturnalia und dem Kommentar zu Scipios Traum.';
    }
    
    return {
      answer,
      sources,
      confidence: relevantPassages.length > 0 ? 0.8 : 0.6
    };
  }
  
  /**
   * üìù GENERATE CULTURAL ANALYSIS TEXT
   * Creates detailed cultural analysis
   */
  private generateCulturalAnalysisText(text: string, themes: string[], language: 'DE' | 'EN' | 'LA'): string {
    let analysis = 'Diese Textstelle aus Macrobius\' Werk zeigt ';
    
    if (themes.length === 0) {
      analysis += 'allgemeine Aspekte der r√∂mischen Kultur und Gelehrsamkeit.';
    } else if (themes.length === 1) {
      analysis += `Elemente aus dem Bereich ${themes[0]}.`;
    } else {
      analysis += `eine Verbindung zwischen ${themes.slice(0, -1).join(', ')} und ${themes[themes.length - 1]}.`;
    }
    
    analysis += ' Macrobius nutzt solche Passagen, um komplexe kulturelle Konzepte zu vermitteln und die Verbindung zwischen antiker Weisheit und zeitgen√∂ssischem Verst√§ndnis herzustellen.';
    
    return analysis;
  }
  
  /**
   * üìä GET CONNECTION STATUS
   * Returns current Oracle Cloud connection status
   */
  public async getConnectionStatus() {
    return await oracleConnectionManager.testConnection();
  }
  
  /**
   * üîÑ FORCE CONNECTION REFRESH
   * Forces a new connection test
   */
  public async refreshConnection() {
    return await oracleConnectionManager.forceRefresh();
  }
}

// Export singleton instance
export const enhancedApiClient = EnhancedAPIClientWithFallback.getInstance();

// Export types for use in components
export type { APIResponse, SearchResult, AIAnalysisResult };